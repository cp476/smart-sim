{"remainingRequest":"/Users/Moosa/cp476_project/v2/smart-sports-sim/node_modules/thread-loader/dist/cjs.js!/Users/Moosa/cp476_project/v2/smart-sports-sim/node_modules/babel-loader/lib/index.js!/Users/Moosa/cp476_project/v2/smart-sports-sim/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Moosa/cp476_project/v2/smart-sports-sim/src/components/bet-example.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Moosa/cp476_project/v2/smart-sports-sim/src/components/bet-example.vue","mtime":1555032334000},{"path":"/Users/Moosa/cp476_project/v2/smart-sports-sim/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/Moosa/cp476_project/v2/smart-sports-sim/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Moosa/cp476_project/v2/smart-sports-sim/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Moosa/cp476_project/v2/smart-sports-sim/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.date.now\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _objectSpread from \"/Users/Moosa/cp476_project/v2/smart-sports-sim/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport firebase from 'firebase';\nimport { db } from '../main';\nimport GradeBadge from '@/components/grade-badge';\nexport default {\n  components: {\n    GradeBadge: GradeBadge\n  },\n  props: {\n    payout: {\n      type: Object,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      risk: null,\n      bankroll: null\n    };\n  },\n  mounted: function mounted() {\n    var user = firebase.auth().currentUser;\n    var self = this;\n    var docRef = db.collection(\"users\").doc(user.uid);\n    var fireRoll = 0;\n    docRef.get().then(function (doc) {\n      if (doc.exists) {\n        fireRoll = doc.data().bankroll;\n        self.bankroll = fireRoll;\n        console.log(this.bankroll);\n      } else {\n        console.log(\"No such document!\");\n      }\n    }).catch(function (error) {\n      console.log(\"Error getting document:\", error);\n    });\n    return self.bankroll;\n  },\n  computed: _objectSpread({}, mapGetters(['dailyBankroll']), {\n    suggestedBetSize: function suggestedBetSize() {\n      return Math.floor(this.dailyBankroll / 15);\n    },\n    calculatedDailyBankroll: function calculatedDailyBankroll() {\n      if (this.risk > this.dailyBankroll) {\n        return 0;\n      }\n\n      return this.dailyBankroll - this.risk;\n    },\n    isFavored: function isFavored() {\n      return this.payout.direction === '+';\n    },\n    type: function type() {\n      return this.payout.type.includes('_') ? this.payout.type.replace('_', ' ') : this.payout.type;\n    },\n    totalPayout: function totalPayout() {\n      if (!this.risk) {\n        return null;\n      } // const value = parseInt(this.payout.val);\n\n\n      var result = this.risk * this.payout.val;\n      return result.toLocaleString('en-US', {\n        style: 'decimal',\n        maximumFractionDigits: 2,\n        minimumFractionDigits: 2\n      });\n    },\n    update_bankroll: function update_bankroll() {\n      var user = firebase.auth().currentUser;\n      var self = this;\n      var docRef = db.collection(\"users\").doc(user.uid);\n      var fireRoll = 0;\n      docRef.get().then(function (doc) {\n        if (doc.exists) {\n          fireRoll = doc.data().bankroll;\n          self.bankroll = fireRoll;\n          console.log(this.bankroll);\n        } else {\n          console.log(\"No such document!\");\n        }\n      }).catch(function (error) {\n        console.log(\"Error getting document:\", error);\n      });\n      return self.bankroll;\n    }\n  }),\n  methods: {\n    cancelOrder: function cancelOrder() {\n      this.risk = null;\n      this.$emit('clear-payout');\n    },\n    addBet: function addBet(firebankroll, risk) {\n      var user = firebase.auth().currentUser;\n      var docRef2 = db.collection(\"open\");\n      var self = this;\n      docRef2.add({\n        val: this.payout.val,\n        teamName: this.payout.team,\n        risk: this.risk,\n        type: this.payout.type,\n        uid: user.uid,\n        keyid: \"none\",\n        created: Date.now()\n      }).then(function (docRef) {\n        var new_bankroll = firebankroll - risk;\n        var doc_id = docRef.id;\n        var adding_keyid = db.collection(\"open\").doc(docRef.id);\n        adding_keyid.update({\n          keyid: doc_id\n        }).then(function () {}).catch(function (error) {\n          // The document probably doesn't exist.\n          console.error(\"Error updating document: \", error);\n        });\n        var user_ref = db.collection(\"users\").doc(user.uid);\n        return user_ref.update({\n          bankroll: new_bankroll\n        }).then(function () {\n          console.log(\"Document successfully updated!\");\n          update_bankroll();\n          this.$emit('clear-payout');\n        }).catch(function (error) {\n          // The document probably doesn't exist.\n          console.error(\"Error updating document: \", error);\n        });\n      }).catch(function (error) {\n        console.error(\"Error adding document: \", error);\n      });\n      this.risk = null;\n      this.$emit('clear-payout');\n    }\n  }\n};",{"version":3,"sources":["bet-example.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"bet-example\">\n    <div class=\"bet-example__category-header\">\n      <h2 class=\"+text-base +text-bold +uppercase +text-grey-6\">Payout Calculator</h2>\n    </div>\n\n    <div class=\"bet-example__content +pd-md\">\n      <p class=\"+mg-0 +text-grey-6\" v-if=\"!payout \">Select an odd to view payout example</p>\n      <div class=\"+flex +flex-direction-column\" v-else>\n        <div class=\"+flex +justify-content-space-between +text-regular +text-grey-6 +mg-b-xxs\">\n          <span>{{ payout.team }}</span>\n          <span class=\"+flex +align-items-center\"><grade-badge :grade=\"payout.grade\" class=\"+mg-r-xs\" /> {{ payout.val }}</span>\n        </div>\n\n        <span class=\"+block +uppercase +text-sm +mg-b-sm +text-grey-5\">{{ type }}</span>\n\n        <div class=\"+flex +mg-b-md\">\n          <v-input\n            icon=\"attach_money\"\n            v-model=\"risk\"\n            class=\"+mg-r-sm\"\n            label=\"Risk\"/>\n          <v-input\n            icon=\"attach_money\"\n            v-model=\"totalPayout\"\n            readonly\n            label=\"To Win\"/>\n        </div>\n\n        <span class=\"+block +text-base +text-regular +text-grey-7 +mg-b-xxs\">Suggested bet size: ${{ suggestedBetSize }}</span>\n        <span class=\"+block +text-base +text-regular +text-grey-7 +mg-b-lg\">Remaining Bankroll: ${{ update_bankroll }}</span>\n\n        <v-btn button-style=\"primary\" :label=\"`Place Bet`\" @click=\"addBet(bankroll,risk)\"/>\n        <v-btn\n          label=\"Clear\"\n          class=\"+block +text-center +mg-t-sm +text-primary +uppercase\"\n          @click=\"cancelOrder\"/>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport firebase from 'firebase';\nimport { db } from '../main';\nimport GradeBadge from '@/components/grade-badge';\n\nexport default {\n    components: { GradeBadge },\n    props: {\n        payout: { type: Object, default: null }\n    },\n    data: () => ({\n        risk: null,\n        bankroll: null\n    }),\n    mounted() {\n      const user = firebase.auth().currentUser\n      var self = this;\n      var docRef = db.collection(\"users\").doc(user.uid);\n      var fireRoll =0;\n      docRef.get().then(function(doc) {\n        if (doc.exists) {\n            fireRoll = doc.data().bankroll;\n            self.bankroll = fireRoll;\n            console.log(  this.bankroll);\n        } else {\n            console.log(\"No such document!\");\n        }\n          }).catch(function(error) {\n              console.log(\"Error getting document:\", error);\n          });\n      return self.bankroll\n        },\n    computed: {\n        ...mapGetters(['dailyBankroll']),\n        suggestedBetSize() {\n            return Math.floor(this.dailyBankroll / 15);\n        },\n        calculatedDailyBankroll() {\n            if (this.risk > this.dailyBankroll) {\n                return 0;\n            }\n\n            return this.dailyBankroll - this.risk;\n        },\n        isFavored() {\n            return this.payout.direction === '+';\n        },\n        type() {\n            return this.payout.type.includes('_') ? this.payout.type.replace('_', ' ') : this.payout.type;\n        },\n        totalPayout() {\n            if (!this.risk) {\n                return null;\n            }\n\n            // const value = parseInt(this.payout.val);\n\n            const result = this.risk  * this.payout.val;\n            return result.toLocaleString('en-US', {\n                style: 'decimal',\n                maximumFractionDigits: 2,\n                minimumFractionDigits: 2\n            });\n        },\n        update_bankroll() {\n            const user = firebase.auth().currentUser\n            var self = this;\n            var docRef = db.collection(\"users\").doc(user.uid);\n            var fireRoll =0;\n            docRef.get().then(function(doc) {\n                if (doc.exists) {\n                    fireRoll = doc.data().bankroll;\n                    self.bankroll = fireRoll;\n                    console.log(  this.bankroll);\n                } else {\n                    console.log(\"No such document!\");\n                }\n                }).catch(function(error) {\n                    console.log(\"Error getting document:\", error);\n                });\n            return self.bankroll\n        }\n\n    },\n    methods: {\n        cancelOrder() {\n            this.risk = null;\n            this.$emit('clear-payout');\n        },\n        addBet(firebankroll,risk) {\n            const user = firebase.auth().currentUser\n            var docRef2 = db.collection(\"open\");\n            var self = this;\n\n            docRef2.add({\n                val: this.payout.val,\n                teamName: this.payout.team,\n                risk: this.risk,\n                type:this.payout.type,\n                uid:user.uid,\n                keyid:\"none\",\n                created: Date.now()\n\n\n            })\n            .then(function(docRef) {\n                var new_bankroll = firebankroll - risk;\n                var doc_id = docRef.id;\n                var adding_keyid = db.collection(\"open\").doc(docRef.id);\n                adding_keyid.update({\n                    keyid: doc_id\n                })\n                .then(function() {\n                    \n                })\n                .catch(function(error) {\n                    // The document probably doesn't exist.\n                    console.error(\"Error updating document: \", error);\n                });\n\n                var user_ref = db.collection(\"users\").doc(user.uid);\n                return user_ref.update({\n                    bankroll: new_bankroll\n                })\n                .then(function() {\n                    console.log(\"Document successfully updated!\");\n                    update_bankroll();\n                    this.$emit('clear-payout');\n                })\n                .catch(function(error) {\n                    // The document probably doesn't exist.\n                    console.error(\"Error updating document: \", error);\n                });\n            })\n            .catch(function(error) {\n                console.error(\"Error adding document: \", error);\n            });\n\n            this.risk = null;\n            this.$emit('clear-payout');\n        }\n    }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@include component(bet-example) {\n    background: $white;\n    border-radius: 4px;\n    box-shadow: $elevation-5;\n    overflow: hidden;\n    z-index: $z-three;\n\n    @include part(category-header) {\n        align-items: center;\n        background: $grey-1;\n        display: flex;\n        justify-content: space-between;\n        min-height: 57px;\n        padding: $md-unit;\n    }\n}\n</style>\n"],"sourceRoot":"src/components"}]}